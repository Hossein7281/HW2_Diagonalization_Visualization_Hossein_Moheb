# -*- coding: utf-8 -*-
"""Diagonalization_Visualization_Hossein_Moheb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N_3_z2Dl7F4y6X0TOXUus7gxAzEU7oOM
"""

import numpy as np
import matplotlib.pyplot as plt
from numpy.linalg import eig
from mpl_toolkits.mplot3d import Axes3D

def define_functions_and_matrix():
    # Define the function F(x, y) and its conjugate
    def F(x, y):
        return np.exp(1j * y) + 2 * np.exp(-0.5j * y) * np.cos(np.sqrt(3) / 2 * x)

    # Create a grid for x and y
    x = np.linspace(-np.pi, np.pi, 100)
    y = np.linspace(-np.pi, np.pi, 100)
    X, Y = np.meshgrid(x, y)

    # Initialize arrays to hold the eigenvalues
    eigenvalues1 = np.zeros((100, 100), dtype=complex)
    eigenvalues2 = np.zeros((100, 100), dtype=complex)

    # Evaluate M for each (x, y) and diagonalize
    for i in range(100):
        for j in range(100):
            # Compute the matrix M at (X[i, j], Y[i, j])
            f_val = F(X[i, j], Y[i, j])
            M = np.array([[0, f_val], [np.conj(f_val), 0]])
            # Compute eigenvalues
            evals, _ = eig(M)
            eigenvalues1[i, j] = evals[0]
            eigenvalues2[i, j] = evals[1]

    # Plot the eigenvalues as surface plots
    fig = plt.figure(figsize=(16, 8))
    ax1 = fig.add_subplot(121, projection='3d')
    ax2 = fig.add_subplot(122, projection='3d')

    # Plotting the real parts of the eigenvalues
    surf1 = ax1.plot_surface(X, Y, np.real(eigenvalues1), cmap='cividis')
    surf2 = ax2.plot_surface(X, Y, np.real(eigenvalues2), cmap='bone')

    ax1.set_title('Real Part of Eigenvalue 1')
    ax2.set_title('Real Part of Eigenvalue 2')
    ax1.set_xlabel('x')
    ax1.set_ylabel('y')
    ax2.set_xlabel('x')
    ax2.set_ylabel('y')

    plt.colorbar(surf1, ax=ax1, shrink=0.5, aspect=5)
    plt.colorbar(surf2, ax=ax2, shrink=0.5, aspect=5)
    plt.show()

# Uncomment the following line to run the function
if __name__ == "__main__":
  define_functions_and_matrix()

